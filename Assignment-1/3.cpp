#include<bits/stdc++.h>
using namespace std;
int shiftAmount[16] = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2 ,2, 1};
char plainText[65]={'\0'}, key[65]={'\0'}, sub_key[65] = {'\0'}, B64key[65]={'\0'}, B56key[65]={'\0'}, B48key[65]={'\0'}, B64pt[65]={'\0'}, B64ptIP[65]={'\0'};
char B48pt[65]={'\0'}, B32pt[65]={'\0'}, B64ptIP_cp[65]={'\0'};

int main(){

	int PC1[56] = {
	 57, 49, 41, 33, 25, 17,  9,
		1, 58, 50, 42, 34, 26, 18,
	 10,  2, 59, 51, 43, 35, 27,
	 19, 11,  3, 60, 52, 44, 36,
	 63, 55, 47, 39, 31, 23, 15,
		7, 62, 54, 46, 38, 30, 22,
	 14,  6, 61, 53, 45, 37, 29,
	 21, 13,  5, 28, 20, 12,  4
	};

	int PC2[48] = {
		14, 17, 11, 24,  1,  5,
		3, 28, 15,  6, 21, 10,
		23, 19, 12,  4, 26,  8,
		16,  7, 27, 20, 13,  2,
		41, 52, 31, 37, 47, 55,
		30, 40, 51, 45, 33, 48,
		44, 49, 39, 56, 34, 53,
		46, 42, 50, 36, 29, 32
	};

	int IP[64] = {
		58, 50, 42, 34, 26, 18, 10,  2,
		60, 52, 44, 36, 28, 20, 12,  4,
		62, 54, 46, 38, 30, 22, 14,  6,
		64, 56, 48, 40, 32, 24, 16,  8,
		57, 49, 41, 33, 25, 17,  9,  1,
		59, 51, 43, 35, 27, 19, 11,  3,
		61, 53, 45, 37, 29, 21, 13,  5,
		63, 55, 47, 39, 31, 23, 15,  7
	};

	int Expansion[48] = {
		32,  1,  2,  3,  4,  5,  4,  5,
		 6,  7,  8,  9,  8,  9, 10, 11,
		12, 13, 12, 13, 14, 15, 16, 17,
		16, 17, 18, 19, 20, 21, 20, 21,
		22, 23, 24, 25, 24, 25, 26, 27,
		28, 29, 28, 29, 30, 31, 32,  1
	};

	int SBox[8][4][16] = {
	 {
		 {14,  4, 13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7},
		 { 0, 15,  7,  4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5,  3,  8},
		 { 4,  1, 14,  8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10,  5,  0},
		 {15, 12,  8,  2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0,  6, 13},
	 },

	 {
		 {15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10},
		 { 3, 13,  4,  7, 15,  2,  8, 14, 12,  0,  1, 10,  6,  9, 11,  5},
		 { 0, 14,  7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15},
		 {13,  8, 10,  1,  3, 15,  4,  2, 11,  6,  7, 12,  0,  5, 14,  9},
	 },

	 {
		 {10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8},
		 {13,  7,  0,  9,  3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1},
		 {13,  6,  4,  9,  8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7},
		 { 1, 10, 13,  0,  6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12},
	 },

	 {
		 { 7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11, 12,  4, 15},
		 {13,  8, 11,  5,  6, 15,  0,  3,  4,  7,  2, 12,  1, 10, 14,  9},
		 {10,  6,  9,  0, 12, 11,  7, 13, 15,  1,  3, 14,  5,  2,  8,  4},
		 { 3, 15,  0,  6, 10,  1, 13,  8,  9,  4,  5, 11, 12,  7,  2, 14},
	 },

	 {
		 { 2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9},
		 {14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3,  9,  8,  6},
		 { 4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6,  3,  0, 14},
		 {11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10,  4,  5,  3},
	 },

	 {
		 {12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11},
		 {10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8},
		 { 9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6},
		 { 4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13},
	 },

	 {
		 { 4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1},
		 {13,  0, 11,  7,  4,  9,  1, 10, 14,  3,  5, 12,  2, 15,  8,  6},
		 { 1,  4, 11, 13, 12,  3,  7, 14, 10, 15,  6,  8,  0,  5,  9,  2},
		 { 6, 11, 13,  8,  1,  4, 10,  7,  9,  5,  0, 15, 14,  2,  3, 12},
	 },

	 {
		 {13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7},
		 { 1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2},
		 { 7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8},
		 { 2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11},
	 },
	};

	int PBox[32] = {
		16,  7, 20, 21, 29, 12, 28, 17,
		 1, 15, 23, 26,  5, 18, 31, 10,
		 2,  8, 24, 14, 32, 27,  3,  9,
		19, 13, 30,  6, 22, 11,  4, 25
	};

	char binaryTohex[2][2][2][2] = {{{{'0', '1'},{'2', '3'}},{{'4', '5'},{'6', '7'}}},{{{'8', '9'},{'A', 'B'}},{{'C', 'D'},{'E', 'F'}}}};
	char round_key_1[49] = {'\0'};
	scanf("%s", plainText);
	scanf("%s", key);
	char gh;
	for (int i = 0; i < 16; i++)
	{	
		switch(key[i]){
			case '0': B64key[(4*i)] = '0'; B64key[(4*i) + 1] = '0'; B64key[(4*i) + 2] = '0'; B64key[(4*i) + 3] = '0'; break;
			case '1': B64key[(4*i)] = '0'; B64key[(4*i) + 1] = '0'; B64key[(4*i) + 2] = '0'; B64key[(4*i) + 3] = '1'; break;
			case '2': B64key[(4*i)] = '0'; B64key[(4*i) + 1] = '0'; B64key[(4*i) + 2] = '1'; B64key[(4*i) + 3] = '0'; break;
			case '3': B64key[(4*i)] = '0'; B64key[(4*i) + 1] = '0'; B64key[(4*i) + 2] = '1'; B64key[(4*i) + 3] = '1'; break;
			case '4': B64key[(4*i)] = '0'; B64key[(4*i) + 1] = '1'; B64key[(4*i) + 2] = '0'; B64key[(4*i) + 3] = '0'; break;
			case '5': B64key[(4*i)] = '0'; B64key[(4*i) + 1] = '1'; B64key[(4*i) + 2] = '0'; B64key[(4*i) + 3] = '1'; break;
			case '6': B64key[(4*i)] = '0'; B64key[(4*i) + 1] = '1'; B64key[(4*i) + 2] = '1'; B64key[(4*i) + 3] = '0'; break;
			case '7': B64key[(4*i)] = '0'; B64key[(4*i) + 1] = '1'; B64key[(4*i) + 2] = '1'; B64key[(4*i) + 3] = '1'; break;
			case '8': B64key[(4*i)] = '1'; B64key[(4*i) + 1] = '0'; B64key[(4*i) + 2] = '0'; B64key[(4*i) + 3] = '0'; break;
			case '9': B64key[(4*i)] = '1'; B64key[(4*i) + 1] = '0'; B64key[(4*i) + 2] = '0'; B64key[(4*i) + 3] = '1'; break;
			case 'A': B64key[(4*i)] = '1'; B64key[(4*i) + 1] = '0'; B64key[(4*i) + 2] = '1'; B64key[(4*i) + 3] = '0'; break;
			case 'B': B64key[(4*i)] = '1'; B64key[(4*i) + 1] = '0'; B64key[(4*i) + 2] = '1'; B64key[(4*i) + 3] = '1'; break;
			case 'C': B64key[(4*i)] = '1'; B64key[(4*i) + 1] = '1'; B64key[(4*i) + 2] = '0'; B64key[(4*i) + 3] = '0'; break;
			case 'D': B64key[(4*i)] = '1'; B64key[(4*i) + 1] = '1'; B64key[(4*i) + 2] = '0'; B64key[(4*i) + 3] = '1'; break;
			case 'E': B64key[(4*i)] = '1'; B64key[(4*i) + 1] = '1'; B64key[(4*i) + 2] = '1'; B64key[(4*i) + 3] = '0'; break;
			case 'F': B64key[(4*i)] = '1'; B64key[(4*i) + 1] = '1'; B64key[(4*i) + 2] = '1'; B64key[(4*i) + 3] = '1'; break;
		}
	}
	for (int j = 0; j < 56; j++)
	{
		B56key[j] = B64key[PC1[j] - 1];
	}

	for(int round_no = 1; round_no<=16; round_no++){
		char temp_char_1, temp_char_2;
		for (int a = 0; a < shiftAmount[round_no-1]; a++){
			temp_char_1 = B56key[0]; temp_char_2 = B56key[28];			
			int b;
			for (b = 0; b < 27; b++){
				B56key[b] = B56key[b+1];
				B56key[b+28] = B56key[b+29];
			}
			B56key[b] = temp_char_1;
			B56key[b+28] = temp_char_2;
		}
		for (int e = 0; e < 48; e++){
			B48key[e] = B56key[PC2[e]-1];
		}
		for (int c = 0; c < 12; c++){
			sub_key[c] = binaryTohex[int(B48key[4*c])-48][int(B48key[4*c+1])-48][int(B48key[4*c+2])-48][int(B48key[4*c+3])-48];
		}
		printf("%s\n", sub_key);
		if(round_no == 1){
			for (int i = 0; i < 48; ++i){
				round_key_1[i] = B48key[i];
			}
		}
	}
	for (int i = 0; i < 16; i++){
		switch(plainText[i]){
			case '0': B64pt[(4*i)] = '0'; B64pt[(4*i) + 1] = '0'; B64pt[(4*i) + 2] = '0'; B64pt[(4*i) + 3] = '0'; break;
			case '1': B64pt[(4*i)] = '0'; B64pt[(4*i) + 1] = '0'; B64pt[(4*i) + 2] = '0'; B64pt[(4*i) + 3] = '1'; break;
			case '2': B64pt[(4*i)] = '0'; B64pt[(4*i) + 1] = '0'; B64pt[(4*i) + 2] = '1'; B64pt[(4*i) + 3] = '0'; break;
			case '3': B64pt[(4*i)] = '0'; B64pt[(4*i) + 1] = '0'; B64pt[(4*i) + 2] = '1'; B64pt[(4*i) + 3] = '1'; break;
			case '4': B64pt[(4*i)] = '0'; B64pt[(4*i) + 1] = '1'; B64pt[(4*i) + 2] = '0'; B64pt[(4*i) + 3] = '0'; break;
			case '5': B64pt[(4*i)] = '0'; B64pt[(4*i) + 1] = '1'; B64pt[(4*i) + 2] = '0'; B64pt[(4*i) + 3] = '1'; break;
			case '6': B64pt[(4*i)] = '0'; B64pt[(4*i) + 1] = '1'; B64pt[(4*i) + 2] = '1'; B64pt[(4*i) + 3] = '0'; break;
			case '7': B64pt[(4*i)] = '0'; B64pt[(4*i) + 1] = '1'; B64pt[(4*i) + 2] = '1'; B64pt[(4*i) + 3] = '1'; break;
			case '8': B64pt[(4*i)] = '1'; B64pt[(4*i) + 1] = '0'; B64pt[(4*i) + 2] = '0'; B64pt[(4*i) + 3] = '0'; break;
			case '9': B64pt[(4*i)] = '1'; B64pt[(4*i) + 1] = '0'; B64pt[(4*i) + 2] = '0'; B64pt[(4*i) + 3] = '1'; break;
			case 'A': B64pt[(4*i)] = '1'; B64pt[(4*i) + 1] = '0'; B64pt[(4*i) + 2] = '1'; B64pt[(4*i) + 3] = '0'; break;
			case 'B': B64pt[(4*i)] = '1'; B64pt[(4*i) + 1] = '0'; B64pt[(4*i) + 2] = '1'; B64pt[(4*i) + 3] = '1'; break;
			case 'C': B64pt[(4*i)] = '1'; B64pt[(4*i) + 1] = '1'; B64pt[(4*i) + 2] = '0'; B64pt[(4*i) + 3] = '0'; break;
			case 'D': B64pt[(4*i)] = '1'; B64pt[(4*i) + 1] = '1'; B64pt[(4*i) + 2] = '0'; B64pt[(4*i) + 3] = '1'; break;
			case 'E': B64pt[(4*i)] = '1'; B64pt[(4*i) + 1] = '1'; B64pt[(4*i) + 2] = '1'; B64pt[(4*i) + 3] = '0'; break;
			case 'F': B64pt[(4*i)] = '1'; B64pt[(4*i) + 1] = '1'; B64pt[(4*i) + 2] = '1'; B64pt[(4*i) + 3] = '1'; break;
		}
	}
	
	for (int i = 0; i < 64; i++){
		 B64ptIP[i] = B64pt[IP[i]-1];
		 B64ptIP_cp[i] = B64ptIP[i];
	}

	for (int i = 0; i < 32; i++){
		B64ptIP[i] = B64ptIP[i+32];
	}
	
	for (int i = 0; i < 48; i++){
		B48pt[i] = B64ptIP[Expansion[i] - 1 + 32];
	}

	for (int i = 0; i < 48; i++){
		B48pt[i] = ((int(B48pt[i])-48)^(int(round_key_1[i])-48))+'0';
	}
	
	int rowValue,colValue,s_value;
	for (int i = 0; i < 8; i++)
	{
		rowValue = (2*(int(B48pt[6*i])-48)) + (int(B48pt[6*i+5])-48);
		colValue = (8*(int(B48pt[6*i+1])-48)) + (4*(int(B48pt[6*i+2])-48)) + (2*(int(B48pt[6*i+3])-48)) + (int(B48pt[6*i+4])-48);
		s_value = SBox[i][rowValue][colValue];
		switch(SBox[i][rowValue][colValue]){
			case 0: B32pt[(4*i)] = '0'; B32pt[(4*i) + 1] = '0'; B32pt[(4*i) + 2] = '0'; B32pt[(4*i) + 3] = '0'; break;
			case 1: B32pt[(4*i)] = '0'; B32pt[(4*i) + 1] = '0'; B32pt[(4*i) + 2] = '0'; B32pt[(4*i) + 3] = '1'; break;
			case 2: B32pt[(4*i)] = '0'; B32pt[(4*i) + 1] = '0'; B32pt[(4*i) + 2] = '1'; B32pt[(4*i) + 3] = '0'; break;
			case 3: B32pt[(4*i)] = '0'; B32pt[(4*i) + 1] = '0'; B32pt[(4*i) + 2] = '1'; B32pt[(4*i) + 3] = '1'; break;
			case 4: B32pt[(4*i)] = '0'; B32pt[(4*i) + 1] = '1'; B32pt[(4*i) + 2] = '0'; B32pt[(4*i) + 3] = '0'; break;
			case 5: B32pt[(4*i)] = '0'; B32pt[(4*i) + 1] = '1'; B32pt[(4*i) + 2] = '0'; B32pt[(4*i) + 3] = '1'; break;
			case 6: B32pt[(4*i)] = '0'; B32pt[(4*i) + 1] = '1'; B32pt[(4*i) + 2] = '1'; B32pt[(4*i) + 3] = '0'; break;
			case 7: B32pt[(4*i)] = '0'; B32pt[(4*i) + 1] = '1'; B32pt[(4*i) + 2] = '1'; B32pt[(4*i) + 3] = '1'; break;
			case 8: B32pt[(4*i)] = '1'; B32pt[(4*i) + 1] = '0'; B32pt[(4*i) + 2] = '0'; B32pt[(4*i) + 3] = '0'; break;
			case 9: B32pt[(4*i)] = '1'; B32pt[(4*i) + 1] = '0'; B32pt[(4*i) + 2] = '0'; B32pt[(4*i) + 3] = '1'; break;
			case 10: B32pt[(4*i)] = '1'; B32pt[(4*i) + 1] = '0'; B32pt[(4*i) + 2] = '1'; B32pt[(4*i) + 3] = '0'; break;
			case 11: B32pt[(4*i)] = '1'; B32pt[(4*i) + 1] = '0'; B32pt[(4*i) + 2] = '1'; B32pt[(4*i) + 3] = '1'; break;
			case 12: B32pt[(4*i)] = '1'; B32pt[(4*i) + 1] = '1'; B32pt[(4*i) + 2] = '0'; B32pt[(4*i) + 3] = '0'; break;
			case 13: B32pt[(4*i)] = '1'; B32pt[(4*i) + 1] = '1'; B32pt[(4*i) + 2] = '0'; B32pt[(4*i) + 3] = '1'; break;
			case 14: B32pt[(4*i)] = '1'; B32pt[(4*i) + 1] = '1'; B32pt[(4*i) + 2] = '1'; B32pt[(4*i) + 3] = '0'; break;
			case 15: B32pt[(4*i)] = '1'; B32pt[(4*i) + 1] = '1'; B32pt[(4*i) + 2] = '1'; B32pt[(4*i) + 3] = '1'; break;
		}
	}
	
	for (int i = 0; i < 32; ++i){
		B64ptIP[i+32] = B32pt[PBox[i] - 1];
	}
	
	for (int i = 32; i < 64; ++i){
		B64ptIP[i] = ((int(B64ptIP_cp[i-32])-48)^(int(B64ptIP[i]))-48) + '0';
	}
	
	for (int i = 0; i < 16; ++i){
		plainText[i] = binaryTohex[int(B64ptIP[4*i]) - 48][int(B64ptIP[4*i + 1]) - 48][int(B64ptIP[4*i + 2]) - 48][int(B64ptIP[4*i + 3]) - 48];
	}
	printf("%s\n",plainText);
}